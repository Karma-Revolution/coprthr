
/***
 *** clrpc common definitions
 ***/

struct dual_ptr {
   int64 local = 1;
   int64 remote = 2;
}


/*** 
 *** cl_int clGetPlatformIDs (cl_uint,cl_platform_id*,cl_uint* ) 
 ***/

struct _clrpc_clGetPlatformIDs_request {
   int64 nplatforms = 1;
   array struct[dual_ptr] platforms = 2;
}

struct _clrpc_clGetPlatformIDs_reply {
	int64 retval = 1;
   array struct[dual_ptr] platforms = 2;
   int64 nplatforms_ret = 3;
}


/***
 *** cl_int clGetPlatformInfo (cl_platform_id platform,
 *** 	cl_platform_info param_name,
 *** 	size_t param_value_size,
 *** 	void *param_value,
 *** 	size_t *param_value_size_ret)
 ***/

struct _clrpc_clGetPlatformInfo_request {
	struct[dual_ptr] platform = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetPlatformInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}


/***
 *** cl_int clGetGENERICInfo (cl_obj_t obj,
 *** 	cl_obj_info param_name,
 *** 	size_t param_value_size,
 *** 	void* param_value,
 *** 	size_t* param_value_size_ret)
 ***/

struct _clrpc_clGetGENERICInfo_request {
	struct[dual_ptr] obj = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetGENERICInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}



/***
 *** cl_int
 *** clGetDeviceIDs(
 ***   cl_platform_id platform,
 ***   cl_device_type devtype,
 ***   cl_uint ndevices,
 ***   cl_device_id* devices,
 ***   cl_uint* ndevices_ret)
 ***/

struct _clrpc_clGetDeviceIDs_request {
	struct[dual_ptr] platform = 1;
	int64 devtype = 2;
   int64 ndevices = 3;
   array struct[dual_ptr] devices = 4;
}

struct _clrpc_clGetDeviceIDs_reply {
	int64 retval = 1;
   array struct[dual_ptr] devices = 2;
   int64 ndevices_ret = 3;
}


/*** cl_int
 *** clGetDeviceInfo(
 ***   cl_device_id devid,
 ***   cl_device_info param_name,
 ***   size_t param_sz,
 ***   void* param_val,
 ***   size_t* param_sz_ret)
 ***/

struct _clrpc_clGetDeviceInfo_request {
	struct[dual_ptr] device = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetDeviceInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}


/***
 *** cl_context
 *** clCreateContext(
 ***  const cl_context_properties* prop,
 ***  cl_uint ndev,
 ***  const cl_device_id* devices,
 ***  void (*pfn_notify) (const char*, const void*, size_t, void*),
 ***  void* user_data,
 ***  cl_int* err_ret )
 ***/

struct _clrpc_clCreateContext_request {
	array int64 xprop = 1;
	int64 ndev = 2;
	array struct[dual_ptr] devices = 3;
	struct[dual_ptr] retval = 4;
}

struct _clrpc_clCreateContext_reply {
	struct[dual_ptr] retval = 1;
	int64 err_ret = 2;
}


/***
 *** cl_context
 *** clCreateContextFromType(
 ***  const cl_context_properties* prop,
 ***	cl_device_type devtype,
 ***  void (*pfn_notify) (const char*, const void*, size_t, void*),
 ***  void* user_data,
 ***  cl_int* err_ret )
 ***/

struct _clrpc_clCreateContextFromType_request {
	array int64 xprop = 1;
	int64 devtype = 2;
	struct[dual_ptr] retval = 3;
}

struct _clrpc_clCreateContextFromType_reply {
	struct[dual_ptr] retval = 1;
	int64 err_ret = 2;
}


/*** cl_int
 *** clGetContextInfo(
 ***   cl_context context,
 ***   cl_context_info param_name,
 ***   size_t param_sz,
 ***   void* param_val,
 ***   size_t* param_sz_ret)
 ***/

struct _clrpc_clGetContextInfo_request {
	struct[dual_ptr] context = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetContextInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}


/***
 *** cl_int clRetainContext( cl_context context )
 ***/

struct _clrpc_clRetainContext_request {
	struct[dual_ptr] context = 1;
}

struct _clrpc_clRetainContext_reply {
	int64 retval = 1;
}


/***
 *** cl_int clReleaseContext( cl_context context )
 ***/

struct _clrpc_clReleaseContext_request {
	struct[dual_ptr] context = 1;
}

struct _clrpc_clReleaseContext_reply {
	int64 retval = 1;
}


/***
 *** cl_command_queue clCreateCommandQueue (
 ***	cl_context context,
 *** 	cl_device_id device,
 *** 	cl_command_queue_properties properties,
 *** 	cl_int *errcode_ret)
 ***/

struct _clrpc_clCreateCommandQueue_request {
	struct[dual_ptr] context = 1;
	struct[dual_ptr] device = 2;
	int64 properties = 3;
	struct[dual_ptr] retval = 4;
}

struct _clrpc_clCreateCommandQueue_reply {
	struct[dual_ptr] retval = 1;
	int64 err_ret = 2;
}


/*** cl_int
 *** clGetCommandQueueInfo(
 ***   cl_command_queue command_queue,
 ***   cl_command_queue_info param_name,
 ***   size_t param_sz,
 ***   void* param_val,
 ***   size_t* param_sz_ret)
 ***/

struct _clrpc_clGetCommandQueueInfo_request {
	struct[dual_ptr] command_queue = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetCommandQueueInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}



/*** cl_int 
 *** clSetCommandQueueProperty(
 *** 	cl_command_queue command_queue,
 ***	cl_command_queue_properties properties,
 ***	cl_bool enable,
 ***	cl_command_queue_properties* old_properties)
 ***/

struct _clrpc_clSetCommandQueueProperty_request {
	struct[dual_ptr] command_queue = 1;
	int64 properties = 2;
	int64 enable = 3;
}

struct _clrpc_clSetCommandQueueProperty_reply {
	int64 retval = 1;
	optional int64 old_properties = 2;
}



/***
 *** cl_int clRetainCommandQueue( cl_command_queue command_queue )
 ***/

struct _clrpc_clRetainCommandQueue_request {
	struct[dual_ptr] command_queue = 1;
}

struct _clrpc_clRetainCommandQueue_reply {
	int64 retval = 1;
}


/***
 *** cl_int clReleaseCommandQueue( cl_command_queue command_queue )
 ***/

struct _clrpc_clReleaseCommandQueue_request {
	struct[dual_ptr] command_queue = 1;
}

struct _clrpc_clReleaseCommandQueue_reply {
	int64 retval = 1;
}


/*** 
 *** cl_mem clCreateBuffer (
 ***	cl_context context,
 ***	cl_mem_flags flags,
 ***	size_t size,
 ***	void *host_ptr,
 ***	cl_int *errcode_ret)
 ***/

struct _clrpc_clCreateBuffer_request {
	struct[dual_ptr] context = 1;
	int64 flags = 2;
	int64 size = 3;
	struct[dual_ptr] retval = 4;
}

struct _clrpc_clCreateBuffer_reply {
	struct[dual_ptr] retval = 1;
	int64 err_ret = 2;
}


/*** cl_int
 *** clGetMemObjectInfo(
 ***   cl_mem memobj,
 ***   cl_mem_info param_name,
 ***   size_t param_sz,
 ***   void* param_val,
 ***   size_t* param_sz_ret)
 ***/

struct _clrpc_clGetMemObjectInfo_request {
	struct[dual_ptr] memobj = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetMemObjectInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}


/***
 *** cl_int clRetainMemObject( cl_mem memobj )
 ***/

struct _clrpc_clRetainMemObject_request {
	struct[dual_ptr] memobj = 1;
}

struct _clrpc_clRetainMemObject_reply {
	int64 retval = 1;
}


/***
 *** cl_int clReleaseMemObject( cl_mem memobj )
 ***/

struct _clrpc_clReleaseMemObject_request {
	struct[dual_ptr] memobj = 1;
}

struct _clrpc_clReleaseMemObject_reply {
	int64 retval = 1;
}


/***
 *** cl_int clEnqueueReadBuffer(
 ***	cl_command_queue command_queue,
 ***	cl_mem buffer,
 ***	cl_bool blocking_read,
 ***	size_t offset,
 ***	size_t cb,
 ***	void *ptr,
 ***	cl_uint num_events_in_wait_list,
 ***	const cl_event *event_wait_list,
 ***	cl_event *event)
 ***/

struct _clrpc_clEnqueueReadBuffer_request {
	struct[dual_ptr] command_queue = 1;
	struct[dual_ptr] buffer = 2;
	int64 blocking_read = 3;
	int64 offset = 4;
	int64 cb = 5;
	int64 num_events_in_wait_list = 6;
	array struct[dual_ptr] event_wait_list = 7;
	struct[dual_ptr] event = 8;
}

struct _clrpc_clEnqueueReadBuffer_reply {
	struct[dual_ptr] event = 1;
	int64 retval = 2;
	optional bytes _bytes = 3;
}


/***
 *** cl_int clEnqueueWriteBuffer (
 ***	cl_command_queue command_queue,
 ***	cl_mem buffer,
 ***	cl_bool blocking_write,
 ***	size_t offset,
 ***	size_t cb,
 ***	const void *ptr,
 ***	cl_uint num_events_in_wait_list,
 ***	const cl_event *event_wait_list,
 ***	cl_event *event)
 ***/

struct _clrpc_clEnqueueWriteBuffer_request {
	struct[dual_ptr] command_queue = 1;
	struct[dual_ptr] buffer = 2;
	int64 blocking_write = 3;
	int64 offset = 4;
	int64 cb = 5;
	bytes _bytes = 6;
	int64 num_events_in_wait_list = 7;
	array struct[dual_ptr] event_wait_list = 8;
	struct[dual_ptr] event = 9;
}

struct _clrpc_clEnqueueWriteBuffer_reply {
	struct[dual_ptr] event = 1;
	int64 retval = 2;
}


/***
 *** cl_int clEnqueueCopyBuffer (
 ***	cl_command_queue command_queue,
 ***	cl_mem src_buffer,
 ***	cl_mem dst_buffer,
 ***	size_t src_offset,
 ***	size_t dst_offset,
 ***	size_t cb,
 ***	cl_uint num_events_in_wait_list,
 ***	const cl_event *event_wait_list,
 ***	cl_event *event)
 ***/

struct _clrpc_clEnqueueCopyBuffer_request {
	struct[dual_ptr] command_queue = 1;
	struct[dual_ptr] src_buffer = 2;
	struct[dual_ptr] dst_buffer = 3;
	int64 src_offset = 4;
	int64 dst_offset = 5;
	int64 cb = 6;
	int64 num_events_in_wait_list = 7;
	array struct[dual_ptr] event_wait_list = 8;
	struct[dual_ptr] event = 9;
}

struct _clrpc_clEnqueueCopyBuffer_reply {
	struct[dual_ptr] event = 1;
	int64 retval = 2;
}


/***
 *** void* clEnqueueMapBuffer(
 ***	cl_command_queue command_queue,
 ***	cl_mem buffer,
 ***	cl_bool blocking_map,
 ***	cl_map_flags map_flags,
 ***	size_t offset,
 ***	size_t cb,
 ***	cl_uint num_events_in_wait_list,
 ***	const cl_event *event_wait_list,
 ***	cl_event *event,
 ***	cl_int* err_ret)
 ***/

struct _clrpc_clEnqueueMapBuffer_request {
	struct[dual_ptr] command_queue = 1;
	struct[dual_ptr] buffer = 2;
	int64 blocking_map = 3;
	int64 map_flags = 4;
	int64 offset = 5;
	int64 cb = 6;
	int64 num_events_in_wait_list = 7;
	array struct[dual_ptr] event_wait_list = 8;
	struct[dual_ptr] event = 9;
	struct[dual_ptr] retval = 10;
}

struct _clrpc_clEnqueueMapBuffer_reply {
	struct[dual_ptr] retval = 1;
	struct[dual_ptr] event = 2;
	int64 err_ret = 3;
	optional bytes _bytes = 4;
}


/***
 *** cl_int clEnqueueUnmapMemObject(
 ***	cl_command_queue command_queue,
 ***	cl_mem memobj,
 ***	void* mapped_ptr,
 ***	cl_uint num_events_in_wait_list,
 ***	const cl_event *event_wait_list,
 ***	cl_event *event)
 ***/

struct _clrpc_clEnqueueUnmapMemObject_request {
	struct[dual_ptr] command_queue = 1;
	struct[dual_ptr] memobj = 2;
	struct[dual_ptr] mapped_ptr = 3;
	optional bytes _bytes = 4;
	int64 num_events_in_wait_list = 5;
	array struct[dual_ptr] event_wait_list = 6;
	struct[dual_ptr] event = 7;
}

struct _clrpc_clEnqueueUnmapMemObject_reply {
	int64 retval = 1;
	struct[dual_ptr] event = 2;
}


/***
 *** cl_program clCreateProgramWithSource(
 ***	cl_context context,
 ***	cl_uint count,
 ***	const char **strings,
 ***	const size_t *lengths,
 ***	cl_int *errcode_ret)
 ***/

struct _clrpc_clCreateProgramWithSource_request {
	struct[dual_ptr] context = 1;
	int64 count = 2;
	bytes _bytes = 3;
	array int64 lengths = 4;
	struct[dual_ptr] retval = 5;
//	int64 err_ret = 6;
}

struct _clrpc_clCreateProgramWithSource_reply {
	struct[dual_ptr] retval = 1;
	int64 err_ret = 2;
}


/***
 *** cl_program clCreateProgramWithBinary (
 ***	cl_context context,
 ***	cl_uint num_devices,
 ***	const cl_device_id* device_list,
 ***	const size_t* lengths,
 ***	const unsigned char** binaries,
 ***	cl_int* binary_status,
 ***	cl_int* errcode_ret)
 ***/

struct _clrpc_clCreateProgramWithBinary_request {
	struct[dual_ptr] context = 1;
	int64 ndev = 2;
	array struct[dual_ptr] devices = 3;
	array int64 lengths = 4;
	bytes _bytes = 5;
	struct[dual_ptr] retval = 6;
//   array int64 status = 7;
//	int64 err_ret = 8;
}

struct _clrpc_clCreateProgramWithBinary_reply {
	struct[dual_ptr] retval = 1;
   array int64 status = 2;
	int64 err_ret = 3;
}


/*** cl_int
 *** clGetProgramInfo(
 ***   cl_program program,
 ***   cl_program_info param_name,
 ***   size_t param_sz,
 ***   void* param_val,
 ***   size_t* param_sz_ret)
 ***/

struct _clrpc_clGetProgramInfo_request {
	struct[dual_ptr] program = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetProgramInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}


/***
 *** cl_int clBuildProgram(
 ***	cl_program program,
 ***	cl_uint num_devices,
 ***	const cl_device_id *device_list,
 ***	const char *options,
 ***	void (CL_CALLBACK *pfn_notify)(cl_program program, void *user_data),
 ***	void *user_data)
 ***/

struct _clrpc_clBuildProgram_request {
	struct[dual_ptr] program = 1;
	int64 ndevices = 2;
	array struct[dual_ptr] devices = 3;
	bytes options = 4;
}

struct _clrpc_clBuildProgram_reply {
	int64 retval = 1;
}


/***
 *** cl_int clRetainProgram( cl_program program )
 ***/

struct _clrpc_clRetainProgram_request {
	struct[dual_ptr] program = 1;
}

struct _clrpc_clRetainProgram_reply {
	int64 retval = 1;
}


/***
 *** cl_int clReleaseProgram( cl_program program )
 ***/

struct _clrpc_clReleaseProgram_request {
	struct[dual_ptr] program = 1;
}

struct _clrpc_clReleaseProgram_reply {
	int64 retval = 1;
}


/***
 *** cl_kernel clCreateKernel (
 ***	cl_program program,
 ***	const char *kernel_name,
 ***	cl_int *errcode_ret)
 ***/

struct _clrpc_clCreateKernel_request {
	struct[dual_ptr] program = 1;
	string kernel_name = 2;
	struct[dual_ptr] retval = 3;
}

struct _clrpc_clCreateKernel_reply {
	struct[dual_ptr] retval = 1;
	int64 err_ret = 2;
}


/*** cl_int
 *** clGetKernelInfo(
 ***   cl_kernel kernel,
 ***   cl_kernel_info param_name,
 ***   size_t param_sz,
 ***   void* param_val,
 ***   size_t* param_sz_ret)
 ***/

struct _clrpc_clGetKernelInfo_request {
	struct[dual_ptr] kernel = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetKernelInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}


/***
 *** cl_int clRetainKernel( cl_kernel kernel )
 ***/

struct _clrpc_clRetainKernel_request {
	struct[dual_ptr] kernel = 1;
}

struct _clrpc_clRetainKernel_reply {
	int64 retval = 1;
}


/***
 *** cl_int clReleaseKernel( cl_kernel kernel )
 ***/

struct _clrpc_clReleaseKernel_request {
	struct[dual_ptr] kernel = 1;
}

struct _clrpc_clReleaseKernel_reply {
	int64 retval = 1;
}


/***
 *** cl_int clSetKernelArg(
 ***	cl_kernel kernel,
 ***	cl_uint arg_index,
 ***	size_t arg_size,
 ***	const void *arg_value)
 ***/

struct _clrpc_clSetKernelArg_request {
	struct[dual_ptr] kernel = 1;
	int64 arg_index = 2;
	int64 arg_size = 3;
	bytes arg_value = 4;
}

struct _clrpc_clSetKernelArg_reply {
	int64 retval = 1;
}


/***
 *** cl_int clEnqueueNDRangeKernel (
 ***	cl_command_queue command_queue,
 ***	cl_kernel kernel,
 ***	cl_uint work_dim,
 ***	const size_t *global_work_offset,
 ***	const size_t *global_work_size,
 ***	const size_t *local_work_size,
 ***	cl_uint num_events_in_wait_list,
 ***	const cl_event *event_wait_list,
 ***	cl_event *event)
 ***/

struct _clrpc_clEnqueueNDRangeKernel_request {
	struct[dual_ptr] command_queue = 1;
	struct[dual_ptr] kernel = 2;
	int64 work_dim = 3;
	array int64 global_work_offset = 4;
	array int64 global_work_size = 5;
	array int64 local_work_size = 6;
	int64 num_events_in_wait_list = 7;
	array struct[dual_ptr] event_wait_list = 8;
	struct[dual_ptr] event = 9;
}

struct _clrpc_clEnqueueNDRangeKernel_reply {
	struct[dual_ptr] event = 1;
	int64 retval = 2;
}


/***
 *** cl_int clFlush (cl_command_queue command_queue)
 ***/

struct _clrpc_clFlush_request {
	struct[dual_ptr] command_queue = 1;
}

struct _clrpc_clFlush_reply {
	int64 retval = 1;
}


/***
 *** cl_int clFinish (cl_command_queue command_queue)
 ***/

struct _clrpc_clFinish_request {
	struct[dual_ptr] command_queue = 1;
}

struct _clrpc_clFinish_reply {
	int64 retval = 1;
}


/***
 *** cl_int clWaitForEvents (cl_uint num_events, const cl_event *event_list)
 ***/

struct _clrpc_clWaitForEvents_request {
	int64 nevents = 1;
	array struct[dual_ptr] events = 2;
}

struct _clrpc_clWaitForEvents_reply {
	int64 retval = 1;
	optional bytes _bytes = 2;
}


/*** cl_int
 *** clGetEventInfo(
 ***   cl_event event,
 ***   cl_event_info param_name,
 ***   size_t param_sz,
 ***   void* param_val,
 ***   size_t* param_sz_ret)
 ***/

struct _clrpc_clGetEventInfo_request {
	struct[dual_ptr] event = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetEventInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}


/*** cl_int
 *** clGetEventProfilingInfo(
 ***   cl_event event,
 ***   cl_profiling_info param_name,
 ***   size_t param_sz,
 ***   void* param_val,
 ***   size_t* param_sz_ret)
 ***/

struct _clrpc_clGetEventProfilingInfo_request {
	struct[dual_ptr] event = 1;
	int64 param_name = 2;
   int64 param_sz = 3;
}

struct _clrpc_clGetEventProfilingInfo_reply {
	int64 retval = 1;
   optional bytes param_val = 2;
	optional int64 param_sz_ret = 3;
}


/***
 *** cl_int clRetainEvent( cl_event event )
 ***/

struct _clrpc_clRetainEvent_request {
	struct[dual_ptr] event = 1;
}

struct _clrpc_clRetainEvent_reply {
	int64 retval = 1;
}


/***
 *** cl_int clReleaseEvent( cl_event event )
 ***/

struct _clrpc_clReleaseEvent_request {
	struct[dual_ptr] event = 1;
}

struct _clrpc_clReleaseEvent_reply {
	int64 retval = 1;
}


