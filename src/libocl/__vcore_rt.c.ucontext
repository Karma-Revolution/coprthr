/* vcore_rt.c
 *
 * Copyright (c) 2009-2010 Brown Deer Technology, LLC.  All Rights Reserved.
 *
 * This software was developed by Brown Deer Technology, LLC.
 * For more information contact info@browndeertechnology.com
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License version 3 (LGPLv3)
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* DAR */

#include <stdlib.h>
#include <math.h>

#include "util.h"

//#define XCL_NO_UCONTEXT 	/* used for testing only */

//#include <pthread.h>
//#include <signal.h>
#ifndef XCL_NO_UCONTEXT
#include <ucontext.h>
#endif

//#include "xcl_structs.h"	/* XXX this should be temporary! -DAR */

//#include "vcore.h"
//#include "cmdcall.h"
//#include "util.h"

//extern void wrapper_3_xxx( void* p );
//extern void* vcore_v[];


//#define VCORE_STACK_MASK (~(VCORE_STACK_SZ-1))


//static pthread_t engine_td[VCORE_NE];
//static pthread_mutex_t engine_mtx[VCORE_NE];
//static pthread_cond_t engine_sig1[VCORE_NE];
//static pthread_cond_t engine_sig2[VCORE_NE];
//static int engine_ready[VCORE_NE];
//satic int engine_shutdown[VCORE_NE];
//static struct cmdcall_arg* engine_cmd_argp[VCORE_NE];
//static struct vcengine_data engine_data[VCORE_NE];

#include <stdint.h>

#define VCORE_NE           16       /* number of engines             */
#define VCORE_NC           16       /* number of vcores per engine   */
#define VCORE_STACK_SZ     16384    /* stack size per vcore          */

#define VCORE_STACK_MASK (~(VCORE_STACK_SZ-1))
#define __fp() __builtin_frame_address(0)
#define __getvcdata() (struct vc_data*)(((intptr_t)__fp())&VCORE_STACK_MASK)

struct work_struct {
   unsigned int tdim;
   size_t ltsz[3];
   size_t gsz[3];
   size_t gtsz[3];
   size_t gid[3];
   size_t gtid[3];
};

struct vc_data {
   int vcid;
   ucontext_t* this_uctx;
   ucontext_t* next_uctx;
   struct work_struct* workp;
   size_t ltid[3];
};


/*
 * intrinsics called from kernels
 */

void barrier( int flags )
{
	struct vc_data* data = __getvcdata();
//	int vcid = data->vcid;
//	DEBUG(__FILE__,__LINE__,"barrier: vcore[%d] flags=%x",vcid,flags);

#ifndef XCL_NO_UCONTEXT
	swapcontext(data->this_uctx, data->next_uctx);
#endif
}

uint get_work_dim() { return((__getvcdata())->workp->tdim); }

size_t get_local_size(uint d) { return((__getvcdata())->workp->ltsz[d]); }
size_t get_local_id(uint d) { return((__getvcdata())->ltid[d]); }

size_t get_num_groups(uint d) { return((__getvcdata())->workp->gsz[d]); }
size_t get_global_size(uint d) { return((__getvcdata())->workp->gtsz[d]); }

size_t get_group_id(uint d) { return((__getvcdata())->workp->gid[d]); }
//size_t get_global_id(uint d) { 
unsigned int get_global_id(uint d) { 
	struct vc_data* data = __getvcdata();
	return((unsigned int)data->ltid[d] + data->workp->gtid[d]); 
}


/* XXX hack, prefetch should do somethig, fix this -DAR */
void __prefetch_g4f32( void* p, size_t n ) {}

float __rsqrt_f32( float x ) { return(1.0f/sqrt(x)); }


