# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(coprthr, 1.1, support@browndeertechnology.com)
#AC_CONFIG_SRCDIR([clmalloc.h])
#AC_CONFIG_HEADER([config.h])

AC_PREFIX_DEFAULT(/usr/local/browndeer)

AC_DEFUN([SET_OPT],
		[if test x$1 != xno; then
			echo "enabled $3"
			$2=1
		else
			echo "disabled $3"
			$2=0
		fi;]
)

AC_CANONICAL_BUILD

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
#AC_PROG_LIBTOOL
AC_PATH_PROG([BASH],[bash],,[path=`$path`])
#AC_CHECK_PROG(F90,gfortran44,gfortran44)

# Checks for libraries.
# FIXME: Replace `main' with a function in `-lOpenCL':
AC_CHECK_LIB([OpenCL], [main])
# FIXME: Replace `main' with a function in `-ldl':
AC_CHECK_LIB([dl], [main])
# FIXME: Replace `main' with a function in `-lpthread':
AC_CHECK_LIB([pthread], [main])

AC_CHECK_LIB([elf],[elf64_getehdr])

PWD=`pwd`


### extract enable/disable options

AC_ARG_ENABLE(clgl,
  AC_HELP_STRING([--enable-clgl],[enable clgl support (default=yes)]),, enable_clgl=yes)

AC_ARG_ENABLE(clete,
  AC_HELP_STRING([--enable-clete],[enable clete expression template acceleration (default=yes)]),, enable_clete=yes)

AC_ARG_ENABLE(debug-libs,
  AC_HELP_STRING([--enable-debug-libs],[enable building debug versions of librarires (default=yes)]),, enable_debug_libs=yes)

AC_ARG_ENABLE(cltrace,
  AC_HELP_STRING([--enable-cltrace],[enable building cltrace tool (default=yes)]),, enable_cltrace=yes)

AC_ARG_ENABLE(clld,
  AC_HELP_STRING([--enable-clld],[enable building clld tool (default=yes)]),, enable_clld=yes)

AC_ARG_ENABLE(libcoprthr,
  AC_HELP_STRING([--enable-libcoprthr],[enable libcoprthr (default=no)]),, enable_libcoprthr=no)

AC_ARG_ENABLE(libcoprthr-ncpu,
  AC_HELP_STRING([--enable-libcoprthr-ncpu],[enable libcoprthr ncpu (default=yes)]),, enable_libcoprthr_ncpu=yes)

#AC_ARG_ENABLE(libcoprthr-atigpu,
#  AC_HELP_STRING([--enable-libcoprthr-atigpu],[enable libcoprthr atigpu (default=no)]),, enable_libcoprthr_atigpu=no)
#
#AC_ARG_ENABLE(libcoprthr-bdt-builtins,
#  AC_HELP_STRING([--enable-libcoprthr-bdt-builtins],[enable libcoprthr bdt builtins (default=no)]),, enable_libcoprthr_bdt_builtins=no)

AC_ARG_ENABLE(fortran,
  AC_HELP_STRING([--enable-fortran],[enable fortran bindings (default=no)]),, enable_fortran=yes)

#AC_ARG_ENABLE(libcoprthr-bdt-builtins,
#  AC_HELP_STRING([--enable-libcoprthr-bdt-builtins],[enable libcoprthr bdt builtins (default=no)]),, enable_libcoprthr_bdt_builtins=no)

### check and process option dependencies and inferences
#if test x$enable_libcoprthr = xno; then
#	enable_libcoprthr_ncpu=no;
#	enable_libcoprthr_atigpu=no;
#	enable_libcoprthr_bdt_builtins=no;
#fi;
enable_libcoprthr_ncpu=enable_libcoprthr;

echo enable_libcoprthr $enable_libcoprthr

### now process the selected options

SET_OPT($enable_clete, ENABLE_CLETE, "CLETE expression template acceleration")
SET_OPT($enable_debug_libs, ENABLE_DEBUG_LIBS, "building debug versions of librarires - use \<libname\>_d.so")
SET_OPT($enable_cltrace, ENABLE_CLTRACE, "building cltrace tool")
SET_OPT($enable_clld, ENABLE_CLLD, "building clld tool")
SET_OPT($enable_libcoprthr, ENABLE_LIBCOPRTHR, "building libcoprthr")
#SET_OPT($enable_libcoprthr_ncpu, ENABLE_NCPU, "libcoprthr ncpu support")
SET_OPT($enable_fortran, ENABLE_FORTRAN, "fortran binding support")
#SET_OPT($enable_libcoprthr_atigpu, ENABLE_ATIGPU, "libcoprthr atigpu support")
#SET_OPT($enable_libcoprthr_bdt_builtins, ENABLE_BDT_BUILTINS, "libcoprthr use bdt builtins")


#OPENCL_INCLUDE=
#OPENCL_LIB=
#OPENCL_LIBNAME=
#DEFAULT_DEFAULT_OPENCL_PLATFORM=
#AMD_SDK=

###
### OpenCL platform selection is somewhat complicated.  Here are the rules:
### 
###    1) gather locations of vendor include and lib paths following best
###       known search path and save temporarily for use in the next steps
###    
###    2) test for --with-opencl-platform, set DEFAULT_OPENCL_PLATFORM.  If it is
###       not set, use /etc/OpenCL/vendors to build list in this order:
###       amdapp,nvidia,intel
###   
###    3) if set scan DEFAULT_OPENCL_PLATFORM in order and set OPENCL_INCLUDE and
###       OPENCL_LIB to be first platform for which we have good paths
###
###    4) test for --with-opencl-include and --with-opencl-lib, and override
###       OPENCL_INCLUDE and OPENCL_LIB as necessary
###


### step 1)
### XXX add vendor checks to make sure there are no collisions -DAR

# find best known AMDAPP paths
if test -e /etc/OpenCL/vendors/ati*.icd; then
  tmp_amdapp_sdk=1;
elif test -e /etc/OpenCL/vendors/amd*.icd; then
  tmp_amdapp_sdk=1;
else 
  tmp_amdapp_sdk=0;
fi;
if test $tmp_amdapp_sdk = 1; then
  for d in /opt/AMDAPP /usr/local/atistream
  do
    if test -e $d/include/CL/cl.h; then
      if test -e $d/lib/x86_64/libOpenCL.so; then
        tmp_amdapp_include=$d/include;
        tmp_amdapp_lib=$d/lib/x86_64;
        break;
      fi;
    fi;
  done;
fi;

# find best known Nvidia paths
if test -e /etc/OpenCL/vendors/nvidia*.icd; then
  tmp_nvidia_sdk=1;
  for d in /usr/local/cuda 
  do 
    if test -e $d/OpenCL/common/inc/CL/cl.h; then
      if test -e $d/OpenCL/common/lib/Linux64/libOpenCL.so; then
        tmp_nvidia_include=$d/OpenCL/common/inc;
        tmp_nvidia_lib=$d/OpenCL/common/lib/Linux64;
        break;
      elif test -e /usr/lib64/libOpenCL.so; then
        tmp_nvidia_include=$d/OpenCL/common/inc;
        tmp_nvidia_lib=/usr/lib64;
        break;
      fi;
    elif test -e $d/include/CL/cl.h; then
      if test -e $d/lib/libOpenCL.so; then
        tmp_nvidia_include=$d/include;
        tmp_nvidia_lib=$d/lib64;
        break;
      elif test -e /usr/lib64/libOpenCL.so; then
        tmp_nvidia_include=$d/include;
        tmp_nvidia_lib=/usr/lib64;
        break;
      fi;
    fi;
  done;
else
  tmp_nvidia_sdk=0;
fi;

# set COPRTHR paths for bootstrap
tmp_coprthr_sdk=1;
tmp_coprthr_include=$PWD/include
tmp_coprthr_lib=$PWD/src/libcoprthr

# find best known Intel paths
if test -e /etc/OpenCL/vendors/intel*.icd; then
  tmp_intel_sdk=1;
  for d in /usr/local
  do 
    if test -e $d/include/CL/cl.h; then
      if test -e $d/lib64/libOpenCL.so; then
        tmp_intel_include=$d/include;
        tmp_intel_lib=$d/lib64;
        break;
      elif test -e /usr/lib/libOpenCL.so; then
        tmp_intel_include=$d/include;
        tmp_intel_lib=/usr/lib;
        break;
      fi;
    fi;
  done;
else
  tmp_intel_sdk=0;
fi;


### step 2)

# test for --with-opencl-platform specification
AC_ARG_WITH(opencl-platform,
  AC_HELP_STRING([--with-opencl-platform=NAMELIST], 
  [specify default platform selection as a comma seperated list]),
  [
    if test x$withval = xyes; then
      AC_MSG_ERROR([usage: --with-opencl-platform=NAMELIST])
    else
		DEFAULT_OPENCL_PLATFORM=$withval;
    fi;
  ],
  [
    if test $tmp_amdapp_sdk -eq 1; then
      DEFAULT_OPENCL_PLATFORM=amdapp;
    fi;

    if test $tmp_nvidia_sdk -eq 1; then
      if ! test -z $DEFAULT_OPENCL_PLATFORM; then
        DEFAULT_OPENCL_PLATFORM=$DEFAULT_OPENCL_PLATFORM,nvidia;
      else
        DEFAULT_OPENCL_PLATFORM=nvidia;
      fi;
    fi;

    if test $tmp_intel_sdk -eq 1; then
      if ! test -z $DEFAULT_OPENCL_PLATFORM; then
        DEFAULT_OPENCL_PLATFORM=$DEFAULT_OPENCL_PLATFORM,intel;
      else
        DEFAULT_OPENCL_PLATFORM=intel;
      fi;
    fi;
  ])


### step 3)

list2=`echo $DEFAULT_OPENCL_PLATFORM | awk '{sub(/,/," ");print}'`
for p in $list2
do
  echo $p

  case $p in

    amd*) 
      OPENCL_INCLUDE=$tmp_amdapp_include;
      OPENCL_LIB=$tmp_amdapp_lib;
      OPENCL_LIBNAME=OpenCL;
      break      
		;;

    nvidia*) 
      OPENCL_INCLUDE=$tmp_nvidia_include;
      OPENCL_LIB=$tmp_nvidia_lib;
      OPENCL_LIBNAME=OpenCL;
      break      
		;;

    coprthr*) 
      OPENCL_INCLUDE=$tmp_coprthr_include;
      OPENCL_LIB=$tmp_coprthr_lib;
      OPENCL_LIBNAME=coprthr;
      break      
		;;

    intel*) 
      OPENCL_INCLUDE=$tmp_intel_include;
      OPENCL_LIB=$tmp_intel_lib;
      OPENCL_LIBNAME=OpenCL;
      break      
		;;

    *)
      echo "unknown OpenCL platform '" $p "'";
      ;;
esac
done


### step 4)

# test for --with-opencl-include specification
AC_ARG_WITH(opencl-include,
  AC_HELP_STRING([--with-opencl-include=DIR], 
  [specify OpenCL include path]),
  [
    if test x$withval = xyes; then
      AC_MSG_ERROR([usage: --with-opencl-include=DIR])
    elif ! test -e $withval/CL/cl.h; then
      AC_MSG_ERROR([bad include path, could not find CL/cl.h])
    else
		OPENCL_INCLUDE=$withval;
    fi;
  ],
  [])

# test for --with-opencl-lib specification
AC_ARG_WITH(opencl-lib,
  AC_HELP_STRING([--with-opencl-lib=DIR], 
  [specify OpenCL lib path]),
  [
    if test x$withval = xyes; then
      AC_MSG_ERROR([usage: --with-opencl-lib=DIR])
    elif ! test -e $withval/$OPENCL_LIBNAME; then
      AC_MSG_ERROR([bad lib path, could not find $OPENCL_LIB])
    else
		OPENCL_LIB=$withval;
    fi;
  ],
  [])


echo "tmp_amdapp_sdk = " $tmp_amdapp_sdk
echo "tmp_amdapp_include = " $tmp_amdapp_include
echo "tmp_amdapp_lib = " $tmp_amdapp_lib

echo "tmp_nvidia_sdk = " $tmp_nvidia_sdk
echo "tmp_nvidia_include = " $tmp_nvidia_include
echo "tmp_nvidia_lib = " $tmp_nvidia_lib

echo "tmp_coprthr_sdk = " $tmp_coprthr_sdk
echo "tmp_coprthr_include = " $tmp_coprthr_include
echo "tmp_coprthr_lib = " $tmp_coprthr_lib

echo "tmp_intel_sdk = " $tmp_intel_sdk
echo "tmp_intel_include = " $tmp_intel_include
echo "tmp_intel_lib = " $tmp_intel_lib

if test -z $OPENCL_INCLUDE; then
	if test x$enable_libcoprthr = xyes; then
		OPENCL_INCLUDE=$PWD/include;
		echo no OpenCL include path, libcoprthr enabled, using bootstrap;
	else
		AC_MSG_ERROR([no OpenCL include path, try --with-opencl-include=DIR])
	fi
fi

if test -z $OPENCL_LIB; then
	if test x$enable_libcoprthr = xyes; then
		OPENCL_LIB=$PWD/src/libcoprthr;
		echo no OpenCL lib path, libcoprthr enabled, using bootstrap;
	else
		AC_MSG_ERROR([no OpenCL lib path, try --with-opencl-lib=DIR])
	fi
fi

if test -z $OPENCL_LIBNAME; then
	if test x$enable_libcoprthr = xyes; then
		OPENCL_LIBNAME=coprthr;
		echo no OpenCL lib name, libcoprthr enabled, using bootstrap;
	else
		AC_MSG_ERROR([no OpenCL lib name])
	fi
fi


echo "DEFAULT_OPENCL_PLATFORM = " $DEFAULT_OPENCL_PLATFORM
echo "OPENCL_INCLUDE = " $OPENCL_INCLUDE
echo "OPENCL_LIB = " $OPENCL_LIB
echo "OPENCL_LIBNAME = " $OPENCL_LIBNAME

# XXX this might be obsolete
#case $build_os in
#
#	freebsd*) 
#		OPENCL_LIBNAME=coprthr
#		;;
#
#	*) 
#		OPENCL_LIBNAME=OpenCL
#		;;
#
#esac

if test x$OPENCL_LIBNAME = xcoprthr; then
	enable_clgl=no;
fi
SET_OPT($enable_clgl, ENABLE_CLGL, "CLGL support")


# XXX this option is going away in echo release -DAR
#AC_ARG_WITH(ati-sdk-21,
#  AC_HELP_STRING([--with-ati-sdk-21=DIR], [Use ATI SDK v2.1 in DIR]),
#  [
#    if test x$withval = xno; then
#		withval=/usr/local/atistream
#	 fi;
#
#      if test -d $withval; then
#         echo "found ATI SDK v2.1 path"
#			ATI_SDK_21=$withval
#      else
#         AC_MSG_ERROR([Could not find ATI SDK v2.1 path])
#      fi;
#
#     if test -e $withval/bin/x86_64/clc; then
#         echo "found ATI SDK v2.1 clc"
#      else
#         AC_MSG_ERROR([Could not find ATI Stream SDK v2.1 clc])
#      fi;
#
#      if test -e $withval/lib/x86_64/builtins_x86-64.bc; then
#         echo "found ATI SDK v2.1 builtins"
#      else
#         AC_MSG_ERROR([Could not find ATI SDK v2.1 builtins])
#      fi;
#
#  ],
#  [ATI_SDK_21=/usr/local/atistream/ati-stream-sdk-v2.1-lnx64])


AC_ARG_WITH(fortran,
  AC_HELP_STRING([--with-fortran=PROG], [Use fortran compiler PROG]),
  [
    if test x$withval = xno; then
         AC_MSG_ERROR([no fortran compiler specified])
    else
    	F90=$withval
    fi;
    echo $F90
  ],
  []) 

if test x$enable_fortran = xyes; then
	if ! test -d F90; then
		AC_CHECK_PROG(F90,gfortran44,gfortran44)
	fi;
fi;

echo $F90


### now address a constant annoyance.  
### we will require a path for libelf and most importantly we will 
### reject attempts to use libelf.so.1 because its useless -DAR

AC_ARG_WITH(libelf,
  AC_HELP_STRING([--with-libelf=DIR], [specify path to libelf]),
  [
    if test x$withval = xno; then
         AC_MSG_ERROR([usage: --with-libelf=DIR])
    else
      LIBELF_PATH=$withval
    fi;
    echo $LIBELF_PATH
  ],
  [
    if test -e /usr/local/lib/libelf.so; then
      LIBELF_PATH=/usr/local;
    else
      AC_MSG_ERROR([cannot find libelf, try --with-libelf=DIR])
    fi;
  ])

echo $LIBELF_PATH

# XXX this seems like a sledge hammer, but its all i could come up with -DAR
tmp_test_libelf=`readelf -d $LIBELF_PATH/lib/libelf.so | grep 'Library soname' | awk '{print $5}'`

if ! test x$tmp_test_libelf = x@<:@libelf.so.0@:>@; then
	echo $tmp_test_libelf
	AC_MSG_ERROR([incorrect version of libelf specified])
fi;

libelf_inc="-I$LIBELF_PATH/include"
libelf_lib="-L$LIBELF_PATH/lib -lelf"

### XXX clean up this syntax - above - for setting paths and such -DAR


BASH=`which bash`

AC_SUBST(BASH)
AC_SUBST(F90)

AC_SUBST(ENABLE_CLGL)
AC_SUBST(ENABLE_CLETE)
AC_SUBST(ENABLE_DEBUG_LIBS)
AC_SUBST(ENABLE_CLTRACE)
AC_SUBST(ENABLE_CLLD)
AC_SUBST(ENABLE_LIBCOPRTHR)
AC_SUBST(ENABLE_NCPU)
#AC_SUBST(ENABLE_ATIGPU)
#AC_SUBST(ENABLE_BDT_BUILTINS)

AC_SUBST(OPENCL_INCLUDE)
AC_SUBST(OPENCL_LIB)
AC_SUBST(OPENCL_LIBNAME)
AC_SUBST(DEFAULT_OPENCL_PLATFORM)

AC_SUBST(libelf_inc)
AC_SUBST(libelf_lib)

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([install-message.txt])
AC_CONFIG_FILES([src/libstdcl/Makefile])
AC_CONFIG_FILES([src/CLETE/Makefile])
AC_CONFIG_FILES([src/libocl/Makefile])
AC_CONFIG_FILES([src/libcoprthr/Makefile])
AC_CONFIG_FILES([src/libclelf/Makefile])
AC_CONFIG_FILES([tools/cltrace/Makefile])
AC_CONFIG_FILES([tools/xclnm/Makefile])
AC_CONFIG_FILES([tools/clld/Makefile])
AC_CONFIG_FILES([tools/clcc/Makefile])
AC_CONFIG_FILES([tools/clcc1/Makefile])
AC_CONFIG_FILES([tools/clnm/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_CONFIG_FILES([test/test_stdcl/Makefile])
AC_CONFIG_FILES([test/test_libcoprthr/Makefile])
AC_CONFIG_FILES([include/Makefile])

AC_CONFIG_FILES([test/test_libcoprthr/scripts/run_tests.sh],[chmod +x test/test_libcoprthr/scripts/run_tests.sh])
AC_CONFIG_FILES([test/test_libcoprthr/scripts/run_quick_tests.sh],[chmod +x test/test_libcoprthr/scripts/run_quick_tests.sh])
AC_CONFIG_FILES([test/test_stdcl/scripts/run_tests.sh],[chmod +x test/test_stdcl/scripts/run_tests.sh])
AC_CONFIG_FILES([test/test_stdcl/scripts/run_quick_tests.sh],[chmod +x test/test_stdcl/scripts/run_quick_tests.sh])

AC_OUTPUT

