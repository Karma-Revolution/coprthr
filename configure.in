# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(coprthr, 1.1, support@browndeertechnology.com)
#AC_CONFIG_SRCDIR([clmalloc.h])
#AC_CONFIG_HEADER([config.h])

AC_PREFIX_DEFAULT(/usr/local/browndeer)

AC_DEFUN([SET_OPT],
		[if test x$1 != xno; then
			echo "enabled $3"
			$2=1
		else
			echo "disabled $3"
			$2=0
		fi;]
)


# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
#AC_PROG_LIBTOOL

# Checks for libraries.
# FIXME: Replace `main' with a function in `-lOpenCL':
AC_CHECK_LIB([OpenCL], [main])
# FIXME: Replace `main' with a function in `-ldl':
AC_CHECK_LIB([dl], [main])
# FIXME: Replace `main' with a function in `-lpthread':
AC_CHECK_LIB([pthread], [main])


### extract enable/disable options

AC_ARG_ENABLE(libstdcl-clgl-support,
  AC_HELP_STRING([--enable-libstdcl-clgl-support],[enable libstdcl CLGL buffer sharing support (default=no)]),, enable_libstdcl_clgl_support=yes)

AC_ARG_ENABLE(clete,
  AC_HELP_STRING([--enable-clete],[enable clete expression template acceleration (default=no)]),, enable_clete=yes)

AC_ARG_ENABLE(debug-libs,
  AC_HELP_STRING([--enable-debug-libs],[enable building debug versions of librarires (default=yes)]),, enable_debug_libs=yes)

AC_ARG_ENABLE(cltrace,
  AC_HELP_STRING([--enable-cltrace],[enable building cltrace tool (default=yes)]),, enable_cltrace=yes)

AC_ARG_ENABLE(libocl,
  AC_HELP_STRING([--enable-libocl],[enable building libocl (default=no)]),, enable_libocl=no)

AC_ARG_ENABLE(libocl-ncpu,
  AC_HELP_STRING([--enable-libocl-ncpu],[enable libocl ncpu (default=yes)]),, enable_libocl_ncpu=yes)

AC_ARG_ENABLE(libocl-atigpu,
  AC_HELP_STRING([--enable-libocl-atigpu],[enable libocl atigpu (default=no)]),, enable_libocl_atigpu=no)

AC_ARG_ENABLE(libocl-bdt-builtins,
  AC_HELP_STRING([--enable-libocl-bdt-builtins],[enable libocl bdt builtins (default=no)]),, enable_libocl_bdt_builtins=no)


### check and process option dependencies and inferences
if test x$enable_libocl == xno; then
	enable_libocl_ncpu=no;
	enable_libocl_atigpu=no;
	enable_libocl_bdt_builtins=no;
fi;


### now process the selected options

SET_OPT($enable_libstdcl_clgl_support, ENABLE_CLGL, "CLGL support")
SET_OPT($enable_clete, ENABLE_CLETE, "CLETE expression template acceleration")
SET_OPT($enable_debug_libs, ENABLE_DEBUG_LIBS, "building debug versions of librarires - use \<libname\>_d.so")
SET_OPT($enable_cltrace, ENABLE_CLTRACE, "building cltrace tool")
SET_OPT($enable_libocl, ENABLE_LIBOCL, "building libocl")
SET_OPT($enable_libocl_ncpu, ENABLE_NCPU, "libocl ncpu support")
SET_OPT($enable_libocl_atigpu, ENABLE_ATIGPU, "libocl atigpu support")
SET_OPT($enable_libocl_bdt_builtins, ENABLE_BDT_BUILTINS, "libocl use bdt builtins")


OPENCL_INC=
OPENCL_LIB=
DEFAULT_OPENCL_PLATFORM=
AMD_SDK=
AC_ARG_WITH(amd-sdk,
  AC_HELP_STRING([--with-amd-sdk=DIR], [Use AMD SDK in DIR]),
  [
    if test x$withval == xno; then
		withval=/usr/local/atistream
	 fi;

      if test -d $withval; then
         echo "found AMD SDK path"
			AMD_SDK=$withval
      else
         AC_MSG_ERROR([Could not find AMD SDK path])
      fi;

      if test -e $withval/include/CL/cl.h; then
        OPENCL_INC="$withval/include"
         echo "found AMD SDK include path"
      else
         AC_MSG_ERROR([Could not find AMD SDK include path])
      fi;

      if test -e $withval/lib/x86_64/libOpenCL.so; then
        OPENCL_LIB="$withval/lib/x86_64"
         echo "found AMD SDK lib path"
      else
         AC_MSG_ERROR([Could not find AMD SDK lib path])
      fi;

	 DEFAULT_OPENCL_PLATFORM=ATI;

  ],
  [OPENCL_LIB=/usr/local/atistream/lib/x86_64; OPENCL_INC=/usr/local/atistream/include; DEFAULT_OPENCL_PLATFORM=ATI; AMD_SDK=/usr/local/atistream])

AC_ARG_WITH(nvidia-sdk,
  AC_HELP_STRING([--with-nvidia-sdk=DIR], [Use Nvidia SDK in DIR]),
  [
    if test x$withval == xno; then
		withval=/usr/local/cuda
	 fi;

      if test -d $withval; then
         echo "found Nvidia SDK path"
      else
         AC_MSG_ERROR([Could not find Nvidia SDK path])
      fi;

      if test -e $withval/include/CL/cl.h; then
        OPENCL_INC="$withval/include"
         echo "found Nvidia SDK include path"
      else
         AC_MSG_ERROR([Could not find Nvidia SDK include path])
      fi;

      if test -e $withval/lib/libOpenCL.so; then
        OPENCL_LIB="$withval/lib"
         echo "found Nvidia SDK lib path"
		elif test -e /usr/lib64/libOpenCL.so; then
        OPENCL_LIB="/usr/lib64"
         echo "found Nvidia SDK lib path"
      else
         AC_MSG_ERROR([Could not find Nvidia SDK lib path])
      fi;

	 DEFAULT_OPENCL_PLATFORM=NVIDIA;
  ],
  [])

OPENCL_LIBNAME=OpenCL

if test $ENABLE_LIBOCL -eq 1; then 
	if ! test -e $AMD_SDK/lib/x86_64/builtins-x86_64.bc; then
		AC_MSG_ERROR([libocl requres builtins-x86_64.bc, file not found])
	fi;
fi;


AC_SUBST(ENABLE_CLGL)
AC_SUBST(ENABLE_CLETE)
AC_SUBST(ENABLE_DEBUG_LIBS)
AC_SUBST(ENABLE_CLTRACE)
AC_SUBST(ENABLE_LIBOCL)
AC_SUBST(ENABLE_NCPU)
AC_SUBST(ENABLE_ATIGPU)
AC_SUBST(ENABLE_BDT_BUILTINS)

AC_SUBST(OPENCL_INC)
AC_SUBST(OPENCL_LIB)
AC_SUBST(OPENCL_LIBNAME)
AC_SUBST(DEFAULT_OPENCL_PLATFORM)

AC_SUBST(AMD_SDK)
#AC_SUBST(AMD_SDK_INC)
#AC_SUBST(AMD_SDK_LIB)

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([src/libstdcl/Makefile])
AC_CONFIG_FILES([src/CLETE/Makefile])
AC_CONFIG_FILES([src/libocl/Makefile])
AC_CONFIG_FILES([tools/cltrace/Makefile])
AC_CONFIG_FILES([tools/xclnm/Makefile])
AC_CONFIG_FILES([tools/clld/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_CONFIG_FILES([test/test_stdcl/Makefile])
AC_CONFIG_FILES([test/test_ocl/Makefile])
AC_CONFIG_FILES([test/test_CLETE/Makefile])

AC_OUTPUT

