
    COPRTHR version 1.1 (outlaw) Release Notes

Copyright © 2011 Brown Deer Technology, LLC

/Verbatim copying and distribution of this entire document is
//permitted //in any medium, provided this notice is preserved./

------------------------------------------------------------------------
The CO-PRocessing THReads (COPRTHR) SDK provides several OpenCL? related
libraries and tools that simplify the use of heterogeneous computing
platforms for developers targeting GPU compute technology and hybrid
CPU/GPU computing architectures.
------------------------------------------------------------------------


    Contents

   1. New in COPRTHR version 1.1 (outlaw) <#New>
   2. Requirements <#Requirements>
   3. Important Notes <#Important>
   4. Installation <#Installation>
   5. Known Issues <#Known>

------------------------------------------------------------------------


    1. New in COPRTHR version 1.1 (outlaw)

    * Updated build system with autoconf configure scripts
    * Many improvements to libstdcl
    * Updated clld link tool
    * Introduction of Compute Layer Expression Template Engine (CLETE)
      for automatic acceleration of C++ container classes
    * Preview of experimental OpenCL run-time for x86_64
    * Preview of CL/GL buffer sharing support

------------------------------------------------------------------------


    2. Requirements

    * *Operating System.* The COPRTHR SDK supports the following 64-bit
      Linux operating systems: RHEL 5.4/5.5, CentOS 5.4/5.5, OpenSuSE
      11.2, Ubuntu 10.4
    * *Hardware.* The COPRTHR SDK supports any modern x86_64 multi-core
      processor (AMD or Intel) and GPUs from both AMD and Nvidia, and
      has been tested successfully on the following graphics cards: ATI
      Radeon HD 4870, 4870X2, 5870, 5970, AMD Radeon HD 6970, ATI
      FirePro V8800, Nvidia 8800GTX, Nvidia Tesla S1060, C2050, C2070.
    * *Third-party software.* Support for all functionality will require
      an OpenCL implementation appropriate to the hardware being used.
      The following implementations have been tested: ATI Stream SDK
      v2.1, v2.2, v2.3, Nvidia SDK v3.2. The COPRTHR preview of libocl
      requires the llc front-end compiler provided by the ATI Stream SDK
      v2.1. The COPRTHR SDK has been tested with GCC 4.1.

------------------------------------------------------------------------


    3. Important Notes

    * The libraries |libstdcl| and |libocl| are provided with debug
      versions |libstdcl_d| and |libocl_d|, respectively. Linking
      against these libraries can be very useful for debugging as well
      as understanding how each library operates.
    * The API for the calls |clarg_set*()| have been changed from the
      previous release to enable future support for pointer arithemetic.
      The correct API for these calls is now:
      |clarg_set(CONTEXT* cp, cl_kernel krn, unsigned int argnum, Tn arg)|
      |clarg_set_global(CONTEXT* cp, cl_kernel krn, unsigned int argnum,
      void* ptr)|
      |clarg_set_local(CONTEXT* cp, cl_kernel krn, unsigned int argnum,
      size_t sizeb)|
    * In order to use the Nvidia SDK for GPU support, the environment
      variable |STDGPU| must be set as follows,
      |export STDGPU="platform_name=nvidia"|
    * The size of the event lists used by |libstdcl| for kernel and
      memory events has been increased to 1024. It is unlikely that
      queuing more events brings any performance benefit and developers
      should ensure that applications block on events at reasonable
      intervals.

------------------------------------------------------------------------


    4. Installation

The following installation instructions are provided for the Linux
distributions identified above under Requirements.

   1. Download COPRTHR version v1.1 (outlaw) release from
      |http://www.github.com/browndeer/coprthr|
   2. Unpack the |.tgz| file and |cd| into the main directory.
   3. Type |./configure| to configure the package. Options to the
      configure script are described below.
   4. Type |make|
   5. Type |make install|
   6. Update relevant shell scripts to include additions to |PATH| and
      |LD_LIBRARY_PATH| environment variables as described in the output
      of the |make install| command

In order to test the installation, type |make quicktest| and a series of
several thousand auto-generated kernels will be tested across all
devices with success or failure indicated for each group of tests. this
test can take a few minutes. A more extensive test can be run by typing
|make test| which can take close to an hour to complete.

The configure script supports the following options:

|--prefix=/path/to/target-install-dir|
    set the root directory for installation
|--with-amd-sdk=/path/to/amd-sdk|
    set the root directory for the AMD ATI Stream SDK. The default
    location searched is /usr/local/atistream.
|--with-nvidia-sdk=/path/to/nvidia-sdk|
    set the root directory for the Nvidia SDK
|--enable-debug-libs|
    enable building debug version of libstdc and libocl (enabled by default)
|--enable-cltrace|
    enable building cltrace tool (enabled by default)
|--enable-clete|
    enable CLETE support (enabled by default)
|--enable-libstdcl-clgl-support|
    enable support for CL/GL buffer sharing (enabled by default)
|--enable-libocl|
    enable building experimental libocl (disabled by default)
|--enable-libocl-ngpu|
    enable multiple CPU device support in libocl (disabled by default)

In order to uninstall the COPRTHR SDK, type |make uninstall| from the
main directory in which the installation was performed.

------------------------------------------------------------------------


    5. Known Issues

    * Exceeding the maximum event list size of 1024 with kernel and/or
      memory events, without blocking for completion, will cause events
      to be dropped and undefined behavior.
    * Calls to |clglmalloc()| may fail due to a known bug in certain
      OpenCL SDKs that return an incorrect value for the GL buffer size.
    * A default context, e.g., |stdgpu|, should be tested to ensure it
      is not |0| before use. This is a common cause of seg faults and
      the root problem is that the underlying OpenCL SDK has found no
      valid devices to run on. A typical cause is failing to select the
      correct platform for GPU support.

------------------------------------------------------------------------

